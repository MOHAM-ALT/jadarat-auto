# 🎯 جدارات أوتو - إضافة Chrome للتقديم التلقائي على الوظائف

<div align="center">

![جدارات أوتو](icons/icon128.png)

**أتمتة التقديم على الوظائف في موقع جدارات (jadarat.sa) بنقرة واحدة**

[![Version](https://img.shields.io/badge/version-1.0.1-blue.svg)](https://github.com/your-repo/jadarat-auto)
[![Chrome Extension](https://img.shields.io/badge/platform-Chrome%20Extension-green.svg)](https://developer.chrome.com/docs/extensions/)
[![License](https://img.shields.io/badge/license-MIT-orange.svg)](LICENSE)

</div>

---

## 📋 جدول المحتويات

- [🎯 نظرة عامة](#-نظرة-عامة)
- [🔍 تحليل الموقع والبنية](#-تحليل-الموقع-والبنية)
- [⚙️ الميزات الرئيسية](#️-الميزات-الرئيسية)
- [🏗️ بنية المشروع](#️-بنية-المشروع)
- [🚀 طريقة التثبيت](#-طريقة-التثبيت)
- [📊 آلية العمل](#-آلية-العمل)
- [🔧 المحددات والعناصر](#-المحددات-والعناصر)
- [🐛 استكشاف الأخطاء](#-استكشاف-الأخطاء)
- [🔮 التطوير المستقبلي](#-التطوير-المستقبلي)
- [🤝 المساهمة](#-المساهمة)

---

## 🎯 نظرة عامة

### الهدف الأساسي
تطوير إضافة Chrome متقدمة تقوم بأتمتة عملية التقديم على الوظائف في موقع **جدارات** (jadarat.sa) بشكل تلقائي وذكي، مع محاكاة السلوك البشري لتجنب الكشف.

### المشكلة المحلولة
- **الوقت المهدر**: التقديم اليدوي على مئات الوظائف يستغرق ساعات طويلة
- **التكرار الممل**: نفس الخطوات تتكرر لكل وظيفة (فتح → مراجعة → تقديم → عودة)
- **تفويت الفرص**: صعوبة متابعة جميع الوظائف الجديدة يومياً
- **الأخطاء البشرية**: احتمالية تخطي وظائف مناسبة أو تكرار التقديم

### الحل المبتكر
إضافة ذكية تحاكي السلوك البشري وتقوم بـ:
- **اكتشاف الوظائف** تلقائياً من صفحات البحث
- **فحص حالة التقديم** لتجنب التكرار
- **التقديم التلقائي** مع معالجة النوافذ المنبثقة
- **التنقل الذكي** بين الصفحات والوظائف
- **إحصائيات مفصلة** للمتابعة والتحكم

---

## 🔍 تحليل الموقع والبنية

### 🌐 بنية موقع جدارات

#### أنواع الصفحات المكتشفة:
```
https://jadarat.sa/
├── /ExploreJobs (أو JobTab=1) ← صفحة قائمة الوظائف
├── /JobDetails (أو JobTab=2) ← صفحة تفاصيل الوظيفة
└── أصناف أخرى (الملف الشخصي، الإعدادات، إلخ)
```

#### 📋 خريطة العملية الكاملة (User Journey)

```mermaid
graph TD
    A[الصفحة الرئيسية] --> B[قائمة الوظائف]
    B --> C[النقر على وظيفة]
    C --> D[صفحة تفاصيل الوظيفة]
    D --> E{فحص حالة التقديم}
    E -->|مُقدم عليها| F[تخطي + العودة]
    E -->|لم يتم التقديم| G[النقر على زر التقديم]
    G --> H[نافذة التأكيد]
    H --> I[تأكيد التقديم]
    I --> J{نتيجة التقديم}
    J -->|نجح| K[نافذة النجاح]
    J -->|فشل| L[نافذة الرفض]
    K --> M[العودة للقائمة]
    L --> M
    F --> M
    M --> N{توجد وظائف أخرى؟}
    N -->|نعم| C
    N -->|لا| O{توجد صفحة تالية؟}
    O -->|نعم| P[الانتقال للصفحة التالية]
    P --> B
    O -->|لا| Q[انتهاء العملية]
```

### 📄 صفحة تفاصيل الوظيفة - البنية الكاملة

```html
<div data-block="Job.PostDetailsBlock" class="OSBlockWidget">
  <!-- رأس الصفحة -->
  <div class="card margin-bottom-base">
    <!-- صورة الشركة + معلومات أساسية -->
    <div class="display-flex align-items-center">
      <img class="entity-image" src="blob:https://jadarat.sa/...">
      
      <div>
        <!-- الرقم التعريفي -->
        <div>الرقم التعريفي: <span>20250707113902889</span></div>
        
        <!-- عنوان الوظيفة -->
        <span class="heading5">أخصائي عمليات موارد بشرية</span>
        
        <!-- اسم الشركة -->
        <a><span>شركة برايم ويف</span></a>
        
        <!-- تاريخ انتهاء الإعلان -->
        <span>تاريخ نهاية الإعلان: 07/08/2025</span>
      </div>
    </div>

    <!-- زر التقديم الرئيسي -->
    <div class="text-align-right">
      <button data-button="" class="btn btn-primary btn-small auto-width OSFillParent" type="button">
        تقديم
      </button>
    </div>
  </div>

  <!-- محتوى التفاصيل -->
  <div class="post-details">
    <!-- الوصف الوظيفي -->
    <label class="font-bold">الوصف الوظيفي</label>
    <span>تنفيذ الإجراءات والأنظمة والنماذج...</span>

    <!-- الشريط الجانبي -->
    <div class="background-grey padding-m border-radius-xl">
      <!-- نوع العمل -->
      <div class="display-flex justify-content-space-between">
        <span class="font-600">نوع العمل</span>
        <span>دوام كامل</span>
      </div>

      <!-- الراتب -->
      <div class="display-flex justify-content-space-between">
        <span class="font-600">الراتب</span>
        <span>4,000الى8,000 ريال سعودي</span>
      </div>

      <!-- المنطقة -->
      <div class="display-flex justify-content-space-between">
        <span class="font-600">المنطقة</span>
        <span>الرياض</span>
      </div>
    </div>

    <!-- المؤهلات والمهارات -->
    <div class="card card-borderless-shadow">
      <span class="font-600">المؤهلات</span>
      <div class="list-style-bullet">
        <span>البكالوريوس في الموارد البشرية</span>
      </div>
    </div>
  </div>
</div>
```

---

## ⚙️ الميزات الرئيسية

### 🎛️ لوحة التحكم المتقدمة
- **▶️ بدء/إيقاف/استكمال** العمليات التلقائية
- **⚙️ إعدادات ذكية** (أوقات انتظار، أنماط تشغيل)
- **📊 إحصائيات مباشرة** (التقديمات، التخطي، الرفض، الإجمالي)
- **🔄 استكمال من النقطة الأخيرة** عند انقطاع العمل

### 🧠 الذكاء الاصطناعي المدمج
- **كشف تلقائي** لبطاقات الوظائف حتى مع تغيير تصميم الموقع
- **تجنب التكرار** بكشف الوظائف المُقدم عليها مسبقاً
- **محاكاة السلوك البشري** بأوقات انتظار عشوائية (2-10 ثوان)
- **معالجة ذكية** للنوافذ المنبثقة والأخطاء
- **انتظار تحميل ديناميكي** للصفحات البطيئة

### 🎨 واجهة مستخدم متطورة
- **تصميم Cyberpunk** بألوان النيون وتأثيرات بصرية
- **شريط تقدم متحرك** مع انيميشن shine
- **مؤشر بصري** في الصفحة يظهر حالة العمل
- **أصوات تنبيه** قابلة للتخصيص

### 📊 نظام إحصائيات متقدم
- **تتبع مفصل** للتقديمات الناجحة
- **رصد أسباب الرفض** مع إمكانية التصدير لـ CSV
- **تحليل الاتجاهات** في معدلات القبول/الرفض
- **إحصائيات الجلسة** المباشرة

---

## 🏗️ بنية المشروع

```
jadarat-auto/
├── 📄 manifest.json          # إعدادات الإضافة (Manifest V3)
├── 🎨 popup.html             # واجهة المستخدم الرئيسية
├── ⚡ popup.js               # منطق واجهة المستخدم والتحكم
├── 🧠 content.js             # السكريبت الذكي الذي يعمل على الموقع
├── 🔧 background.js          # الخدمات الخلفية وإدارة الإضافة
├── 📁 styles/
│   └── 🎨 popup.css          # تصميم Cyberpunk المتقدم
├── 📁 icons/                 # الأيقونات
│   ├── 🖼️ icon16.png         # أيقونة 16x16
│   ├── 🖼️ icon48.png         # أيقونة 48x48
│   └── 🖼️ icon128.png        # أيقونة 128x128
├── 📁 assets/                # ملفات إضافية
│   └── 🖼️ demori-logo.png    # شعار إضافي
└── 📖 README.md              # هذا الملف
```

### 📁 تفصيل الملفات الأساسية:

#### 1. **manifest.json** - إعدادات الإضافة
```json
{
  "manifest_version": 3,
  "name": "جدارات أوتو",
  "version": "1.0.1",
  "permissions": ["activeTab", "storage", "scripting", "notifications"],
  "host_permissions": ["https://jadarat.sa/*"],
  "background": {"service_worker": "background.js"},
  "content_scripts": [{"matches": ["https://jadarat.sa/*"], "js": ["content.js"]}],
  "action": {"default_popup": "popup.html"}
}
```

#### 2. **content.js** - المحرك الذكي (2000+ سطر)
المسؤول عن:
- ✅ كشف نوع الصفحة تلقائياً
- ✅ انتظار تحميل المحتوى الديناميكي  
- ✅ استخراج بيانات الوظائف
- ✅ التقديم التلقائي مع معالجة النوافذ المنبثقة
- ✅ التنقل بين الصفحات
- ✅ إحصائيات مفصلة

#### 3. **popup.js** - واجهة التحكم (800+ سطر)
المسؤول عن:
- ✅ لوحة تحكم تفاعلية
- ✅ إعدادات قابلة للتخصيص
- ✅ عرض الإحصائيات المباشرة
- ✅ تصدير بيانات الرفض
- ✅ التواصل مع content.js

#### 4. **background.js** - الخدمات الخلفية (500+ سطر)
المسؤول عن:
- ✅ حفظ البيانات والإعدادات
- ✅ إرسال التنبيهات
- ✅ تسجيل النشاطات
- ✅ إدارة دورة حياة الإضافة

---

## 🚀 طريقة التثبيت

### المتطلبات:
- **Google Chrome** أو أي متصفح يدعم Chromium
- **حساب نشط** في موقع جدارات
- **صلاحيات Developer Mode** في Chrome

### خطوات التثبيت:

#### 1. **تحضير الملفات**
```bash
# إنشاء مجلد المشروع
mkdir jadarat-auto
cd jadarat-auto

# نسخ جميع الملفات المطلوبة
# تأكد من وجود الأيقونات في مجلد icons/
```

#### 2. **تفعيل Developer Mode في Chrome**
1. افتح Chrome واذهب إلى `chrome://extensions/`
2. فعّل "Developer mode" في الزاوية العلوية اليمنى
3. ستظهر أزرار جديدة في الأعلى

#### 3. **تحميل الإضافة**
1. انقر على "Load unpacked"
2. اختر مجلد `jadarat-auto`
3. ستظهر الإضافة في قائمة الإضافات

#### 4. **التحقق من التثبيت**
1. اذهب إلى [jadarat.sa](https://jadarat.sa)
2. انقر على أيقونة الإضافة 🎯
3. يجب أن تظهر الواجهة بنجاح

### 🔧 استكشاف أخطاء التثبيت:

| المشكلة | الحل |
|---------|------|
| **"Manifest file is missing"** | تأكد من وجود `manifest.json` في المجلد الرئيسي |
| **"Invalid manifest"** | تحقق من صحة بناء JSON في `manifest.json` |
| **"Extension failed to load"** | افحص أخطاء JavaScript في `popup.js` أو `content.js` |
| **"Icons not found"** | تأكد من وجود الأيقونات في مجلد `icons/` |

---

## 📊 آلية العمل

### 🔄 دورة العمل التفصيلية:

#### **المرحلة 1: التحضير والفحص**
```javascript
// 1. فحص تسجيل الدخول
checkLoginStatus() // البحث عن "تسجيل الدخول"

// 2. انتظار تحميل المحتوى
await waitForPageLoadAndCheck()

// 3. تحديد نوع الصفحة
checkPageType() // home/jobList/jobDetails/unknown

// 4. التنقل المناسب
if (home) navigateToJobList()
if (jobDetails) startFromJobDetails()
if (jobList) startFromJobList()
```

#### **المرحلة 2: معالجة قائمة الوظائف**
```javascript
// 1. انتظار تحميل الصفحة
await wait(4000)

// 2. اكتشاف الوظائف
const jobCards = getJobCardsWithRetry()
// - البحث عن: a[href*="JobDetails"]
// - استخراج العنوان من: .heading4
// - فحص "تم التقدم": img[src*="tickcircle.svg"]

// 3. معالجة كل وظيفة
for (jobCard of jobCards) {
  await processJobWithRetry(jobCard, maxRetries=2)
}

// 4. الانتقال للصفحة التالية
await goToNextPage()
```

#### **المرحلة 3: معالجة وظيفة واحدة**
```javascript
// 1. النقر على رابط الوظيفة
await clickElementImproved(jobCard.link)

// 2. انتظار تحميل صفحة التفاصيل
await waitForNavigationImproved()

// 3. التعامل مع النوافذ المنبثقة
await handlePopups() // إغلاق نافذة التقييم الرقمي

// 4. فحص حالة التقديم
const alreadyApplied = await checkIfAlreadyAppliedInDetails()

// 5. التقديم أو التخطي
if (alreadyApplied) {
  stats.skipped++
} else {
  const result = await applyForJobWithRetry()
}

// 6. العودة لقائمة الوظائف
await goBackToJobList()
```

#### **المرحلة 4: عملية التقديم**
```javascript
// 1. البحث عن زر التقديم
const submitButton = findSubmitButton()

// 2. النقر على زر التقديم
await clickElementImproved(submitButton)

// 3. معالجة نافذة التأكيد
await handleConfirmationDialog()
// البحث عن: "هل أنت متأكد من التقديم"
// النقر على: button:contains("تقديم")

// 4. معالجة نافذة النتيجة
const result = await handleResultDialog()
// نجاح: "تم التقديم بنجاح"
// رفض: "عذراً، لا يمكنك التقديم"

// 5. إغلاق النافذة والعودة
```

---

## 🔧 المحددات والعناصر

### 📍 دليل المحددات الشامل:

#### للمطورين والذكاء الاصطناعي المستقبلي:

```javascript
// === محددات صفحة قائمة الوظائف ===

const JOB_LIST_SELECTORS = {
  // قائمة الوظائف
  jobList: '[data-list]',
  jobListAlt: '.list.list-group',
  
  // بطاقات الوظائف
  jobCards: 'a[href*="/Jadarat/JobDetails"]',
  jobCardsAlt: 'a[data-link][href*="JobDetails"]',
  
  // عناوين الوظائف
  jobTitles: 'span.heading4.OSFillParent',
  jobTitlesAlt: '.heading4',
  
  // مؤشرات التقديم المسبق
  appliedText: 'span.text-primary:contains("تم التقدم")',
  appliedIcon: 'img[src*="tickcircle.svg"]',
  
  // التنقل
  nextPage: 'button[aria-label*="go to next page"]:not([disabled])',
  prevPage: 'button[aria-label*="go to previous page"]:not([disabled])',
  activePage: '.pagination-button.is--active'
}

// === محددات صفحة تفاصيل الوظيفة ===

const JOB_DETAILS_SELECTORS = {
  // تحديد الصفحة
  pageIdentifier: '[data-block="Job.PostDetailsBlock"]',
  jobTitle: 'span.heading5',
  companyName: 'a[data-link] span[data-expression]',
  jobId: 'span:contains("الرقم التعريفي")',
  
  // زر التقديم
  submitButton: 'button.btn.btn-primary:contains("تقديم")',
  submitButtonAlt: 'button[data-button]:contains("تقديم")',
  
  // حالة التقديم المسبق
  alreadyAppliedButton: 'button:contains("استعراض طلب التقديم")',
  alreadyAppliedText: ':contains("تم التقديم على هذه الوظيفة")',
  
  // معلومات الوظيفة
  jobDescription: 'label:contains("الوصف الوظيفي") + span',
  workType: '.display-flex:contains("نوع العمل") span:last-child',
  salary: '.display-flex:contains("الراتب") span',
  gender: '.display-flex:contains("الجنس") span:last-child',
  location: '.display-flex:contains("المنطقة") span:last-child'
}

// === محددات النوافذ المنبثقة ===

const MODAL_SELECTORS = {
  // النوافذ العامة
  modal: '[role="dialog"]',
  modalAlt: '.modal',
  modalAlt2: '[class*="modal"]',
  
  // نافذة التأكيد
  confirmDialog: '[role="dialog"]:contains("هل أنت متأكد")',
  confirmButton: 'button:contains("تقديم")',
  cancelButton: 'button:contains("إلغاء")',
  
  // نافذة النتيجة
  successDialog: '[role="dialog"]:contains("تم التقديم بنجاح")',
  rejectionDialog: '[role="dialog"]:contains("عذراً، لا يمكنك التقديم")',
  
  // أزرار الإغلاق
  closeButton: 'button:contains("إغلاق")',
  okButton: 'button:contains("موافق")',
  xButton: 'button:contains("×")',
  
  // نافذة التقييم الرقمي
  digitalExperienceDialog: '[role="dialog"]:contains("تقييم تجربتك الرقمية")'
}
```

### 🎯 استراتيجية الكشف المتدرجة:

#### **المستوى الأول - الكشف الأساسي:**
```javascript
function detectJobCards() {
    // 1. البحث المباشر
    let jobCards = document.querySelectorAll('a[href*="/Jadarat/JobDetails"]');
    
    if (jobCards.length > 0) {
        return Array.from(jobCards).map(link => ({
            element: link,
            container: link.closest('[data-container]'),
            title: extractTitle(link)
        }));
    }
    
    // 2. البحث في القائمة
    const listContainer = document.querySelector('[data-list]');
    if (listContainer) {
        return searchWithinContainer(listContainer);
    }
    
    // 3. البحث الشامل (آخر حل)
    return fallbackDetection();
}
```

---

## 🐛 استكشاف الأخطاء

### 🔍 الأخطاء الشائعة وحلولها:

#### 1. **خطأ: "Could not establish connection"**
```javascript
// السبب: content.js غير محمل أو متعطل
// الحل في popup.js:
async function checkConnection() {
    try {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        const response = await chrome.tabs.sendMessage(tab.id, { action: 'PING' });
        
        if (!response) {
            // إعادة حقن content script
            await chrome.scripting.executeScript({
                target: { tabId: tab.id },
                files: ['content.js']
            });
        }
    } catch (error) {
        console.error('Connection failed:', error);
        this.showError('فشل في الاتصال - جرب إعادة تحميل الصفحة');
    }
}
```

#### 2. **خطأ: "لم يتم العثور على وظائف"**
```javascript
// أدوات التشخيص في Console:
console.log('=== تشخيص كشف الوظائف ===');
console.log('القائمة الرئيسية:', document.querySelector('[data-list]'));
console.log('روابط الوظائف:', document.querySelectorAll('a[href*="JobDetails"]').length);
console.log('العناصر المحتملة:', document.querySelectorAll('[data-container]').length);

// فحص بنية HTML الحالية
const sampleContainer = document.querySelector('[data-container]');
if (sampleContainer) {
    console.log('عينة من البنية:', sampleContainer.outerHTML.substring(0, 500));
}
```

#### 3. **خطأ: عدم النقر على الوظائف**
```javascript
// اختبار النقر اليدوي:
function testJobClick() {
    const firstJob = document.querySelector('a[href*="JobDetails"]');
    if (firstJob) {
        // تمييز العنصر
        firstJob.style.border = '3px solid red';
        firstJob.style.background = 'yellow';
        
        console.log('العنصر موجود:', firstJob);
        console.log('النص:', firstJob.textContent);
        console.log('الرابط:', firstJob.href);
        
        // محاولة النقر
        setTimeout(() => {
            firstJob.click();
            console.log('تم النقر');
        }, 2000);
    } else {
        console.error('لم يتم العثور على وظائف');
    }
}
```

#### 4. **خطأ: البطء في التحميل**
```javascript
// نظام الانتظار الذكي المدمج:
async function waitForContentToLoad() {
    const maxAttempts = 20; // 20 ثانية كحد أقصى
    let attempts = 0;
    
    while (attempts < maxAttempts) {
        const hasBasicContent = checkForBasicContent();
        
        if (hasBasicContent) {
            console.log('✅ تم تحميل المحتوى الأساسي');
            return;
        }
        
        attempts++;
        console.log(`⏳ محاولة ${attempts}/${maxAttempts} - في انتظار المحتوى...`);
        
        await wait(1000);
    }
}
```

### 📊 سجل الأخطاء المتقدم:

```javascript
// نظام تسجيل شامل
class ErrorLogger {
    static log(error, context = {}) {
        const errorData = {
            timestamp: new Date().toISOString(),
            message: error.message,
            stack: error.stack,
            url: window.location.href,
            userAgent: navigator.userAgent,
            context: context
        };
        
        // حفظ في التخزين المحلي
        this.saveToStorage(errorData);
        
        // إرسال إلى console
        console.error('جدارات أوتو - خطأ:', errorData);
        
        // إشعار المستخدم
        this.notifyUser(error.message);
    }
}
```

---

