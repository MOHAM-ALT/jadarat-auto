# 🎯 جدارات أوتو - إضافة Chrome للتقديم التلقائي على الوظائف

<div align="center">

![جدارات أوتو](icons/icon128.png)

**أتمتة التقديم على الوظائف في موقع جدارات (jadarat.sa) بنقرة واحدة**

[![Version](https://img.shields.io/badge/version-1.0.1-blue.svg)](https://github.com/your-repo/jadarat-auto)
[![Chrome Extension](https://img.shields.io/badge/platform-Chrome%20Extension-green.svg)](https://developer.chrome.com/docs/extensions/)
[![License](https://img.shields.io/badge/license-MIT-orange.svg)](LICENSE)

</div>

---

## 📋 جدول المحتويات

- [🎯 نظرة عامة](#-نظرة-عامة)
- [🔍 تحليل الموقع والبنية](#-تحليل-الموقع-والبنية)
- [⚙️ الميزات الرئيسية](#️-الميزات-الرئيسية)
- [🏗️ بنية المشروع](#️-بنية-المشروع)
- [🚀 طريقة التثبيت](#-طريقة-التثبيت)
- [📊 آلية العمل](#-آلية-العمل)
- [🔧 المحددات والعناصر](#-المحددات-والعناصر)
- [🐛 استكشاف الأخطاء](#-استكشاف-الأخطاء)
- [🔮 التطوير المستقبلي](#-التطوير-المستقبلي)
- [🤝 المساهمة](#-المساهمة)

---

## 🎯 نظرة عامة

### الهدف الأساسي
تطوير إضافة Chrome متقدمة تقوم بأتمتة عملية التقديم على الوظائف في موقع **جدارات** (jadarat.sa) بشكل تلقائي وذكي.

### المشكلة المحلولة
- **الوقت المهدر**: التقديم اليدوي على مئات الوظائف يستغرق ساعات طويلة
- **التكرار الممل**: نفس الخطوات تتكرر لكل وظيفة (فتح → مراجعة → تقديم → عودة)
- **تفويت الفرص**: صعوبة متابعة جميع الوظائف الجديدة يومياً
- **الأخطاء البشرية**: احتمالية تخطي وظائف مناسبة أو تكرار التقديم

### الحل المبتكر
إضافة ذكية تحاكي السلوك البشري وتقوم بـ:
- **اكتشاف الوظائف** تلقائياً من صفحات البحث
- **فحص حالة التقديم** لتجنب التكرار
- **التقديم التلقائي** مع معالجة النوافذ المنبثقة
- **التنقل الذكي** بين الصفحات والوظائف
- **إحصائيات مفصلة** للمتابعة والتحكم

---

## 🔍 تحليل الموقع والبنية

### 🌐 بنية موقع جدارات

#### أنواع الصفحات المكتشفة:
```
https://jadarat.sa/
├── /ExploreJobs (أو JobTab=1) ← صفحة قائمة الوظائف
├── /JobDetails (أو JobTab=2) ← صفحة تفاصيل الوظيفة
└── أصناف أخرى (الملف الشخصي، الإعدادات، إلخ)
```

#### تحليل HTML الفعلي للوظائف:

##### 1. **بطاقات الوظائف في القائمة:**
```html
<div data-container="">
  <div data-container="" class="display-flex align-items-center margin-bottom-s">
    <div data-container="" class="font-bold font-size-base">
      <a data-link="" href="#">
        <span data-expression="">شركة يوسف عبدالله عبدالعزيز الراجحي للصناعة</span>
      </a>
    </div>
  </div>
  
  <!-- عنوان الوظيفة -->
  <div data-container="" class="text-primary heading5">
    <a data-link="" href="/Jadarat/JobDetails?IsFromJobfair=false&JobFairId=&JobTab=1&Param=...">
      <span data-expression="" class="heading4 OSFillParent">أخصائي عمليات موارد بشرية</span>
    </a>
  </div>
  
  <!-- تفاصيل الوظيفة -->
  <div data-container="">
    <span data-expression="" class="text-neutral-7 OSFillParent">
      وصف الوظيفة والمهام المطلوبة...
    </span>
  </div>
  
  <!-- معلومات إضافية -->
  <div data-container="" class="margin-bottom-s">
    <div data-container="" class="font-size-xs text-neutral-7">المدينة</div>
    <div data-container="" class="font-bold font-size-base">الرياض</div>
  </div>
</div>
```

##### 2. **مؤشر "تم التقدم" للوظائف المُقدم عليها:**
```html
<div data-container="" class="display-flex justify-content-flex-start align-items-center full-height">
  <div data-container="" class="display-flex">
    <img data-image="" class="margin-right-s non-hidden-img" 
         src="/Jadarat/img/UEP_Resources.tickcircle.svg">
    <span class="text-primary">تم التقدم</span>
  </div>
</div>
```

##### 3. **أزرار التنقل (Pagination):**
```html
<div data-container="" class="pagination-container OSInline" role="navigation">
  <!-- الصفحة السابقة -->
  <button data-button="" class="pagination-button" type="button" disabled="" 
          aria-label="go to previous page">
    <div class="pagination-previous OSInline">
      <i data-icon="" class="icon fa fa-angle-left fa-1x"></i>
    </div>
  </button>
  
  <!-- أرقام الصفحات -->
  <div data-container="" class="display-flex">
    <button data-button="" class="pagination-button is--active" type="button" 
            aria-label="page 1, current page">
      <span data-expression="">1</span>
    </button>
    <!-- المزيد من أرقام الصفحات -->
  </div>
  
  <!-- الصفحة التالية -->
  <button data-button="" class="pagination-button" type="button" 
          aria-label="go to next page">
    <div class="pagination-next OSInline">
      <i data-icon="" class="icon fa fa-angle-right fa-1x"></i>
    </div>
  </button>
</div>
```

##### 4. **عناصر صفحة تفاصيل الوظيفة:**
```html
<!-- زر التقديم (عندما متاح) -->
<button data-button="" class="btn btn-primary" type="button">
  تقديم على الوظيفة
</button>

<!-- حالة "تم التقديم مسبقاً" -->
<div class="already-applied-indicator">
  <span>استعراض طلب التقديم</span>
  <!-- أو -->
  <span>تم التقديم على هذه الوظيفة</span>
</div>

<!-- نوافذ التأكيد -->
<div role="dialog" class="modal">
  <div class="modal-content">
    <span>هل أنت متأكد من التقديم على وظيفة...</span>
    <button>تقديم</button>
    <button>إلغاء</button>
  </div>
</div>
```

### 🔍 المحددات الأساسية المكتشفة:

| العنصر | المحدد الأساسي | المحدد البديل |
|--------|----------------|----------------|
| **قائمة الوظائف** | `[data-list]` | `.list.list-group` |
| **بطاقة الوظيفة** | `a[href*="/Jadarat/JobDetails"]` | `[data-link][href*="JobDetails"]` |
| **عنوان الوظيفة** | `.heading4.OSFillParent` | `span[data-expression]` |
| **"تم التقدم"** | `span.text-primary:contains("تم التقدم")` | `img[src*="tickcircle.svg"]` |
| **زر الصفحة التالية** | `button[aria-label*="go to next page"]:not([disabled])` | `.pagination-next` |
| **زر التقديم** | `button:contains("تقديم")` | `[data-button]:contains("تقديم")` |
| **نوافذ التأكيد** | `[role="dialog"]` | `.modal, [class*="modal"]` |

---

## ⚙️ الميزات الرئيسية

### 🎛️ لوحة التحكم المتقدمة
- **▶️ بدء/إيقاف/استكمال** العمليات التلقائية
- **⚙️ إعدادات ذكية** (أوقات انتظار، أنماط تشغيل)
- **📊 إحصائيات مباشرة** (التقديمات، التخطي، الإجمالي)
- **🔄 استكمال من النقطة الأخيرة** عند انقطاع العمل

### 🧠 الذكاء الاصطناعي المدمج
- **كشف تلقائي** لبطاقات الوظائف حتى مع تغيير تصميم الموقع
- **تجنب التكرار** بكشف الوظائف المُقدم عليها مسبقاً
- **محاكاة السلوك البشري** بأوقات انتظار عشوائية
- **معالجة ذكية** للنوافذ المنبثقة والأخطاء

### 🎨 واجهة مستخدم متطورة
- **تصميم Cyberpunk** بألوان النيون وتأثيرات بصرية
- **شريط تقدم متحرك** مع انيميشن shine
- **مؤشر بصري** في الصفحة يظهر حالة العمل
- **أصوات تنبيه** قابلة للتخصيص

---

## 🏗️ بنية المشروع

```
jadarat-auto/
├── 📄 manifest.json          # إعدادات الإضافة (Manifest V3)
├── 🎨 popup.html             # واجهة المستخدم الرئيسية
├── ⚡ popup.js               # منطق واجهة المستخدم والتحكم
├── 🧠 content.js             # السكريبت الذكي الذي يعمل على الموقع
├── 🔧 background.js          # الخدمات الخلفية وإدارة الإضافة
├── 📁 styles/
│   └── 🎨 popup.css          # تصميم Cyberpunk المتقدم
├── 📁 icons/                 # الأيقونات (موجودة ولكن لم يتم رفعها)
│   ├── 🖼️ icon16.png         # أيقونة 16x16
│   ├── 🖼️ icon48.png         # أيقونة 48x48
│   └── 🖼️ icon128.png        # أيقونة 128x128
├── 📁 assets/                # ملفات إضافية
│   └── 🖼️ demori-logo.png    # شعار إضافي
└── 📖 README.md              # هذا الملف
```

### 📁 تفصيل الملفات:

#### 1. **manifest.json**
```json
{
  "manifest_version": 3,
  "name": "جدارات أوتو",
  "version": "1.0.1",
  "permissions": ["activeTab", "storage", "scripting", "notifications"],
  "host_permissions": ["https://jadarat.sa/*"],
  "background": {"service_worker": "background.js"},
  "content_scripts": [{"matches": ["https://jadarat.sa/*"], "js": ["content.js"]}],
  "action": {"default_popup": "popup.html"}
}
```

#### 2. **popup.html** - الواجهة الرئيسية
- **Header**: شعار الإضافة وزر الإغلاق
- **Control Panel**: أزرار التحكم (بدء/إيقاف/استكمال)
- **Settings**: إعدادات متقدمة (الوقت، النمط، الأصوات)
- **Statistics**: إحصائيات مباشرة للجلسة
- **Progress**: شريط التقدم والوظيفة الحالية
- **Footer**: حالة الاتصال ورقم الإصدار

#### 3. **popup.js** - منطق التحكم
```javascript
class JadaratAutoPopup {
  constructor() {
    this.initializeElements();      // ربط عناصر الواجهة
    this.bindEvents();              // ربط الأحداث
    this.loadSettings();            // تحميل الإعدادات المحفوظة
    this.checkConnection();         // فحص الاتصال مع content.js
  }
  
  async startAutomation() {...}     // بدء التشغيل
  async pauseAutomation() {...}     // إيقاف مؤقت
  async stopAutomation() {...}      // إيقاف نهائي
  handleMessage(message) {...}      // معالجة رسائل content.js
}
```

#### 4. **content.js** - المحرك الذكي
```javascript
class JadaratAutoContent {
  constructor() {
    this.checkPageType();           // تحديد نوع الصفحة
    this.addVisualIndicator();      // إضافة المؤشر البصري
  }
  
  getJobCards() {...}               // اكتشاف بطاقات الوظائف
  processJob(jobCard) {...}         // معالجة وظيفة واحدة
  applyForJob() {...}               // عملية التقديم
  goToNextPage() {...}              // الانتقال للصفحة التالية
  handleDigitalExperiencePopup() {...} // معالجة النوافذ المنبثقة
}
```

#### 5. **background.js** - الخدمات الخلفية
```javascript
class JadaratAutoBackground {
  constructor() {
    this.initializeListeners();     // استمع للأحداث
  }
  
  handleInstallation() {...}        // التثبيت الأولي
  createNotification() {...}        // إنشاء التنبيهات
  logActivity() {...}               // تسجيل النشاطات
  cleanup() {...}                   // تنظيف البيانات القديمة
}
```

---

## 🚀 طريقة التثبيت

### المتطلبات:
- **Google Chrome** أو أي متصفح يدعم Chromium
- **حساب نشط** في موقع جدارات
- **صلاحيات Developer Mode** في Chrome

### خطوات التثبيت:

#### 1. **تحضير الملفات**
```bash
# إنشاء مجلد المشروع
mkdir jadarat-auto
cd jadarat-auto

# نسخ جميع الملفات المطلوبة
# تأكد من وجود الأيقونات في مجلد icons/
```

#### 2. **تفعيل Developer Mode في Chrome**
1. افتح Chrome واذهب إلى `chrome://extensions/`
2. فعّل "Developer mode" في الزاوية العلوية اليمنى
3. ستظهر أزرار جديدة في الأعلى

#### 3. **تحميل الإضافة**
1. انقر على "Load unpacked"
2. اختر مجلد `jadarat-auto`
3. ستظهر الإضافة في قائمة الإضافات

#### 4. **التحقق من التثبيت**
1. اذهب إلى [jadarat.sa](https://jadarat.sa)
2. انقر على أيقونة الإضافة 🎯
3. يجب أن تظهر الواجهة بنجاح

### 🔧 استكشاف أخطاء التثبيت:

| المشكلة | الحل |
|---------|------|
| **"Manifest file is missing"** | تأكد من وجود `manifest.json` في المجلد الرئيسي |
| **"Invalid manifest"** | تحقق من صحة بناء JSON في `manifest.json` |
| **"Extension failed to load"** | افحص أخطاء JavaScript في `popup.js` أو `content.js` |
| **"Icons not found"** | تأكد من وجود الأيقونات في مجلد `icons/` |

---

## 📊 آلية العمل

### 🔄 دورة العمل الكاملة:

```mermaid
graph TD
    A[البدء] --> B[فحص نوع الصفحة]
    B --> C{هل صفحة قائمة الوظائف؟}
    C -->|لا| D[عرض رسالة خطأ]
    C -->|نعم| E[اكتشاف بطاقات الوظائف]
    E --> F[فلترة الوظائف المُقدم عليها]
    F --> G[معالجة كل وظيفة]
    G --> H[النقر على رابط الوظيفة]
    H --> I[انتظار تحميل صفحة التفاصيل]
    I --> J[معالجة النوافذ المنبثقة]
    J --> K{هل مُقدم عليها مسبقاً؟}
    K -->|نعم| L[تخطي + زيادة العداد]
    K -->|لا| M[العثور على زر التقديم]
    M --> N[النقر على زر التقديم]
    N --> O[معالجة نوافذ التأكيد]
    O --> P[معالجة نتيجة التقديم]
    P --> Q[العودة لقائمة الوظائف]
    L --> Q
    Q --> R{هل توجد وظائف أخرى؟}
    R -->|نعم| G
    R -->|لا| S{هل توجد صفحة تالية؟}
    S -->|نعم| T[الانتقال للصفحة التالية]
    T --> E
    S -->|لا| U[انتهاء العملية]
```

### 🧠 خوارزمية اكتشاف الوظائف:

#### 1. **البحث الأساسي:**
```javascript
// البحث عن القائمة الرئيسية
const listElement = document.querySelector('[data-list]');

// البحث عن روابط الوظائف
const jobLinks = listElement.querySelectorAll('a[href*="/Jadarat/JobDetails"]');
```

#### 2. **فلترة الوظائف:**
```javascript
for (const container of cardContainers) {
    const jobLink = container.querySelector('a[href*="/Jadarat/JobDetails"]');
    if (jobLink) {
        // فحص حالة "تم التقدم"
        const alreadyApplied = container.querySelector('span.text-primary');
        const isApplied = alreadyApplied && alreadyApplied.textContent.includes('تم التقدم');
        
        if (!isApplied) {
            validJobs.push({
                container: container,
                link: jobLink,
                title: extractJobTitle(container)
            });
        }
    }
}
```

#### 3. **استخراج عنوان الوظيفة:**
```javascript
function extractJobTitle(container) {
    // البحث عن عنوان الوظيفة بأولوية
    const selectors = [
        'span.heading4',
        '.heading4',
        'a[href*="JobDetails"] span',
        '[data-expression]'
    ];
    
    for (const selector of selectors) {
        const element = container.querySelector(selector);
        if (element && element.textContent.trim()) {
            return element.textContent.trim();
        }
    }
    
    return 'وظيفة غير محددة';
}
```

### ⚡ نظام معالجة النوافذ المنبثقة:

#### أنواع النوافذ المكتشفة:

1. **نافذة التقييم الرقمي:**
   - تظهر أحياناً عند فتح تفاصيل الوظيفة
   - تحتوي على "تقييم تجربتك الرقمية"
   - **المعالجة**: إغلاق تلقائي بالنقر على زر الإغلاق

2. **نافذة تأكيد التقديم:**
   - تظهر عند النقر على زر "تقديم"
   - تحتوي على "هل أنت متأكد من التقديم..."
   - **المعالجة**: النقر على "تقديم" للتأكيد

3. **نافذة نتيجة التقديم:**
   - تظهر بعد التقديم
   - **نجح**: "تم التقديم بنجاح" ✅
   - **فشل**: "عذراً، لا يمكنك التقديم" ❌
   - **المعالجة**: إغلاق النافذة وتسجيل النتيجة

```javascript
async function handleApplicationDialogs() {
    const dialogs = document.querySelectorAll('[role="dialog"], .modal, [class*="modal"]');
    
    for (const dialog of dialogs) {
        if (dialog.offsetWidth > 0 && dialog.offsetHeight > 0) {
            const text = dialog.textContent;
            
            // نافذة تأكيد
            if (text.includes('متأكد') || text.includes('تأكيد')) {
                const confirmButton = Array.from(dialog.querySelectorAll('button'))
                    .find(btn => btn.textContent.includes('تقديم'));
                if (confirmButton) {
                    confirmButton.click();
                    await delay(2000);
                }
            }
            
            // نافذة النتيجة
            if (text.includes('تم التقديم') || text.includes('فشل')) {
                const closeButton = Array.from(dialog.querySelectorAll('button'))
                    .find(btn => btn.textContent.includes('إغلاق') || 
                                 btn.textContent.includes('موافق'));
                if (closeButton) {
                    closeButton.click();
                    await delay(1000);
                }
            }
        }
    }
}
```

---

## 🔧 المحددات والعناصر

### 📍 دليل المحددات الشامل:

#### للمطورين والذكاء الاصطناعي المستقبلي:

```javascript
// === محددات صفحة قائمة الوظائف ===

// 1. الحاوي الرئيسي للقائمة
const MAIN_LIST_SELECTORS = [
    '[data-list]',                    // المحدد الأساسي
    '.list.list-group',              // محدد بديل
    '[data-container] > .list'       // محدد احتياطي
];

// 2. بطاقات الوظائف الفردية
const JOB_CARD_SELECTORS = [
    'a[href*="/Jadarat/JobDetails"]',        // الرابط الأساسي
    '[data-link][href*="JobDetails"]',       // محدد البيانات
    'a[href*="JobTab=2"]',                   // رابط بديل
    '[href*="Param="]'                       // رابط مُشفر
];

// 3. عناوين الوظائف
const JOB_TITLE_SELECTORS = [
    'span.heading4.OSFillParent',            // المحدد الأساسي
    '.heading4',                             // عام
    '.text-primary.heading5 span',           // بديل
    'a[href*="JobDetails"] span',            // داخل الرابط
    '[data-expression]'                      // محدد البيانات
];

// 4. مؤشرات "تم التقدم"
const ALREADY_APPLIED_SELECTORS = [
    'span.text-primary:contains("تم التقدم")',     // النص المباشر
    'img[src*="tickcircle.svg"]',                  // الأيقونة
    '.already-applied-indicator',                   // فئة مخصصة
    '[data-container]:contains("تم التقدم")'       // في الحاوي
];

// === محددات التنقل ===

// 5. أزرار الصفحة التالية
const NEXT_PAGE_SELECTORS = [
    'button[aria-label*="go to next page"]:not([disabled])',  // الأساسي
    '.pagination-next:not(.disabled)',                        // فئة CSS
    '.pagination button:last-child:not([disabled])',         // الأخير
    'button:contains("التالي"):not([disabled])'               // النص العربي
];

// 6. أزرار الصفحة السابقة
const PREV_PAGE_SELECTORS = [
    'button[aria-label*="go to previous page"]:not([disabled])',
    '.pagination-previous:not(.disabled)',
    '.pagination button:first-child:not([disabled])'
];

// === محددات صفحة تفاصيل الوظيفة ===

// 7. أزرار التقديم
const SUBMIT_BUTTON_SELECTORS = [
    'button:contains("تقديم")',                    // النص المباشر
    'input[type="submit"][value*="تقديم"]',        // إدخال من نوع submit
    '[data-button]:contains("تقديم")',             // محدد البيانات
    'a[href*="apply"]:contains("تقديم")',          // رابط تقديم
    '.btn-primary:contains("تقديم")',              // زر أساسي
    'button[class*="submit"]:contains("تقديم")'    // فئة submit
];

// 8. مؤشرات التقديم المسبق في صفحة التفاصيل
const ALREADY_APPLIED_DETAIL_SELECTORS = [
    ':contains("استعراض طلب التقديم")',
    ':contains("تم التقديم على هذه الوظيفة")',
    ':contains("تم التقدم")',
    ':contains("مُقدم عليها")',
    '.application-status.applied'
];

// === محددات النوافذ المنبثقة ===

// 9. النوافذ المنبثقة العامة
const POPUP_SELECTORS = [
    '[role="dialog"]',               // مربع حوار
    '.modal',                        // مودال
    '.popup',                        // نافذة منبثقة
    '[class*="modal"]',              // أي فئة تحتوي على modal
    '[class*="popup"]',              // أي فئة تحتوي على popup
    '.overlay',                      // طبقة علوية
    '[data-modal]'                   // محدد البيانات
];

// 10. أزرار الإغلاق
const CLOSE_BUTTON_SELECTORS = [
    'button:contains("إغلاق")',           // نص إغلاق
    'button:contains("×")',              // رمز X
    '.close',                            // فئة إغلاق
    '[data-dismiss]',                    // محدد البيانات
    '[aria-label*="close"]',             // تسمية إمكانية الوصول
    'button[type="button"]:last-child'   // آخر زر في المودال
];

// 11. أزرار التأكيد
const CONFIRM_BUTTON_SELECTORS = [
    'button:contains("تقديم"):not(:contains("إلغاء"))',  // تقديم فقط
    'button:contains("موافق")',                          // موافق
    'button:contains("تأكيد")',                          // تأكيد
    '.btn-primary:contains("تقديم")',                   // زر أساسي
    '[data-action="confirm"]'                           // محدد البيانات
];
```

### 🎯 استراتيجية الكشف المتدرجة:

#### المستوى الأول - الكشف الأساسي:
```javascript
function detectJobCards() {
    // 1. البحث المباشر
    let jobCards = document.querySelectorAll('a[href*="/Jadarat/JobDetails"]');
    
    if (jobCards.length > 0) {
        return Array.from(jobCards).map(link => ({
            element: link,
            container: link.closest('[data-container]'),
            title: extractTitle(link)
        }));
    }
    
    // 2. البحث في القائمة
    const listContainer = document.querySelector('[data-list]');
    if (listContainer) {
        return searchWithinContainer(listContainer);
    }
    
    // 3. البحث الشامل (آخر حل)
    return fallbackDetection();
}
```

#### المستوى الثاني - البحث المتقدم:
```javascript
function searchWithinContainer(container) {
    const candidates = [];
    
    // البحث عن جميع الروابط المحتملة
    const allLinks = container.querySelectorAll('a[href]');
    
    for (const link of allLinks) {
        const href = link.getAttribute('href');
        
        // فحص أنماط URL المختلفة
        if (href.includes('JobDetails') || 
            href.includes('JobTab=2') || 
            href.includes('Param=')) {
            
            const parent = link.closest('[data-container]');
            if (parent && !isAlreadyApplied(parent)) {
                candidates.push({
                    element: link,
                    container: parent,
                    title: extractTitle(link, parent)
                });
            }
        }
    }
    
    return candidates;
}
```

#### المستوى الثالث - الكشف الذكي:
```javascript
function fallbackDetection() {
    const candidates = [];
    const allElements = document.querySelectorAll('*');
    
    for (const element of allElements) {
        // فحص النص للكلمات المفتاحية للوظائف
        const text = element.textContent || '';
        const hasJobKeywords = JOB_KEYWORDS.some(keyword => 
            text.includes(keyword)
        );
        
        // فحص إمكانية النقر
        const isClickable = element.onclick || 
                           element.querySelector('a') || 
                           element.tagName === 'A';
        
        // فحص الطول المناسب
        const hasReasonableLength = text.length > 20 && text.length < 500;
        
        if (hasJobKeywords && isClickable && hasReasonableLength) {
            const score = calculateJobScore(text);
            if (score > MIN_JOB_SCORE) {
                candidates.push({
                    element: element,
                    score: score,
                    title: text.substring(0, 100)
                });
            }
        }
    }
    
    // ترتيب حسب النتيجة وإرجاع الأفضل
    return candidates
        .sort((a, b) => b.score - a.score)
        .slice(0, MAX_JOBS_PER_PAGE)
        .map(candidate => ({
            element: candidate.element,
            container: candidate.element,
            title: candidate.title
        }));
}
```

---

## 🐛 استكشاف الأخطاء

### 🔍 الأخطاء الشائعة وحلولها:

#### 1. **خطأ: "Could not establish connection"**
```javascript
// السبب: content.js غير محمل أو متعطل
// الحل في popup.js:
async function checkConnection() {
    try {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        const response = await chrome.tabs.sendMessage(tab.id, { action: 'PING' });
        
        if (!response) {
            // إعادة حقن content script
            await chrome.scripting.executeScript({
                target: { tabId: tab.id },
                files: ['content.js']
            });
        }
    } catch (error) {
        console.error('Connection failed:', error);
        this.showError('فشل في الاتصال - جرب إعادة تحميل الصفحة');
    }
}
```

#### 2. **خطأ: "لم يتم العثور على وظائف"**
```javascript
// أدوات التشخيص في Console:
console.log('=== تشخيص كشف الوظائف ===');
console.log('القائمة الرئيسية:', document.querySelector('[data-list]'));
console.log('روابط الوظائف:', document.querySelectorAll('a[href*="JobDetails"]').length);
console.log('العناصر المحتملة:', document.querySelectorAll('[data-container]').length);

// فحص بنية HTML الحالية
const sampleContainer = document.querySelector('[data-container]');
if (sampleContainer) {
    console.log('عينة من البنية:', sampleContainer.outerHTML.substring(0, 500));
}
```

#### 3. **خطأ: عدم النقر على الوظائف**
```javascript
// اختبار النقر اليدوي:
function testJobClick() {
    const firstJob = document.querySelector('a[href*="JobDetails"]');
    if (firstJob) {
        // تمييز العنصر
        firstJob.style.border = '3px solid red';
        firstJob.style.background = 'yellow';
        
        console.log('العنصر موجود:', firstJob);
        console.log('النص:', firstJob.textContent);
        console.log('الرابط:', firstJob.href);
        
        // محاولة النقر
        setTimeout(() => {
            firstJob.click();
            console.log('تم النقر');
        }, 2000);
    } else {
        console.error('لم يتم العثور على وظائف');
    }
}

// تشغيل في Console:
testJobClick();
```

#### 4. **خطأ: عدم العثور على زر التقديم**
```javascript
// في صفحة تفاصيل الوظيفة:
function findSubmitButtons() {
    console.log('=== البحث عن أزرار التقديم ===');
    
    const allButtons = document.querySelectorAll('button, input[type="submit"], a');
    const submitCandidates = [];
    
    allButtons.forEach((btn, index) => {
        const text = (btn.textContent || btn.value || '').trim();
        if (text.includes('تقديم')) {
            submitCandidates.push({
                index: index,
                element: btn,
                text: text,
                visible: btn.offsetWidth > 0 && btn.offsetHeight > 0,
                tagName: btn.tagName,
                className: btn.className
            });
        }
    });
    
    console.log('أزرار التقديم المكتشفة:', submitCandidates);
    
    if (submitCandidates.length > 0) {
        // تمييز الأزرار
        submitCandidates.forEach(candidate => {
            candidate.element.style.border = '3px solid green';
        });
    }
    
    return submitCandidates;
}
```

#### 5. **خطأ: توقف العملية**
```javascript
// نظام الإنعاش التلقائي:
class AutoRecovery {
    constructor() {
        this.lastActivity = Date.now();
        this.checkInterval = setInterval(() => this.checkHealth(), 30000);
    }
    
    checkHealth() {
        const timeSinceLastActivity = Date.now() - this.lastActivity;
        
        // إذا لم يكن هناك نشاط لأكثر من دقيقتين
        if (timeSinceLastActivity > 120000 && this.isRunning) {
            console.warn('كشف توقف محتمل - محاولة الإنعاش');
            this.recoverOperation();
        }
    }
    
    updateActivity() {
        this.lastActivity = Date.now();
    }
    
    recoverOperation() {
        // محاولة العودة لقائمة الوظائف
        if (window.location.href.includes('JobDetails')) {
            window.history.back();
        }
        
        // إعادة تشغيل العملية
        setTimeout(() => {
            this.processCurrentPage();
        }, 5000);
    }
}
```

### 📊 سجل الأخطاء المتقدم:

```javascript
// نظام تسجيل شامل
class ErrorLogger {
    static log(error, context = {}) {
        const errorData = {
            timestamp: new Date().toISOString(),
            message: error.message,
            stack: error.stack,
            url: window.location.href,
            userAgent: navigator.userAgent,
            context: context
        };
        
        // حفظ في التخزين المحلي
        this.saveToStorage(errorData);
        
        // إرسال إلى console
        console.error('جدارات أوتو - خطأ:', errorData);
        
        // إشعار المستخدم
        this.notifyUser(error.message);
    }
    
    static async saveToStorage(errorData) {
        try {
            const result = await chrome.storage.local.get(['errorLogs']);
            const logs = result.errorLogs || [];
            
            logs.push(errorData);
            
            // احتفظ بآخر 50 خطأ فقط
            if (logs.length > 50) {
                logs.splice(0, logs.length - 50);
            }
            
            await chrome.storage.local.set({ errorLogs: logs });
        } catch (storageError) {
            console.error('فشل في حفظ سجل الأخطاء:', storageError);
        }
    }
}
```

---

## 🔮 التطوير المستقبلي

### 🎯 المراحل القادمة:

#### المرحلة 2: تحسينات الذكاء الاصطناعي
- **فلتر ذكي للوظائف** بناءً على الكلمات المفتاحية
- **تعلم آلي** من تفضيلات المستخدم
- **كشف تلقائي** لتغييرات بنية الموقع
- **تحليل ذكي** لأوصاف الوظائف

#### المرحلة 3: تقارير وتحليلات
- **لوحة معلومات** تفاعلية للإحصائيات
- **تصدير البيانات** إلى CSV/Excel
- **رسوم بيانية** لمعدلات النجاح
- **تحليل الاتجاهات** في سوق العمل

#### المرحلة 4: الجدولة والأتمتة المتقدمة
- **جدولة تلقائية** للتشغيل في أوقات محددة
- **تنبيهات ذكية** للوظائف الجديدة
- **تزامن متعدد الأجهزة** عبر حساب المستخدم
- **API للتكامل** مع تطبيقات أخرى

#### المرحلة 5: دعم مواقع إضافية
- **بوابة أجر** (ajeer.sa)
- **لينكد إن** LinkedIn
- **بيت.كوم** Bayt.com
- **واجهة موحدة** لإدارة جميع المواقع

### 🛠️ خطة التحسين التقني:

#### تحسين الأداء:
```javascript
// نظام Cache للبيانات
class DataCache {
    constructor() {
        this.cache = new Map();
        this.ttl = 5 * 60 * 1000; // 5 دقائق
    }
    
    set(key, value) {
        this.cache.set(key, {
            value: value,
            timestamp: Date.now()
        });
    }
    
    get(key) {
        const item = this.cache.get(key);
        if (!item) return null;
        
        if (Date.now() - item.timestamp > this.ttl) {
            this.cache.delete(key);
            return null;
        }
        
        return item.value;
    }
}

// تحسين استهلاك الذاكرة
class MemoryOptimizer {
    static cleanup() {
        // تنظيف المتغيرات غير المستخدمة
        if (window.jadaratAutoContent) {
            window.jadaratAutoContent.cleanupOldData();
        }
        
        // إجبار جمع القمامة
        if (window.gc) {
            window.gc();
        }
    }
}
```

#### تحسين الأمان:
```javascript
// حماية من الكشف
class AntiDetection {
    static randomDelay(base) {
        const variation = base * 0.4; // تنويع 40%
        const human_delay = Math.random() * 2000; // تأخير بشري
        return base + (Math.random() * 2 - 1) * variation + human_delay;
    }
    
    static simulateHumanBehavior() {
        // محاكاة حركة الماوس
        this.simulateMouseMovement();
        
        // محاكاة التمرير
        this.simulateScrolling();
        
        // محاكاة فترات القراءة
        this.simulateReadingTime();
    }
    
    static simulateMouseMovement() {
        const event = new MouseEvent('mousemove', {
            clientX: Math.random() * window.innerWidth,
            clientY: Math.random() * window.innerHeight
        });
        document.dispatchEvent(event);
    }
}
```

---

## 📚 دليل الصيانة والتطوير

### 🔧 للمطورين المستقبليين:

#### قواعد تطوير الكود:
1. **التوثيق**: كل دالة يجب أن تحتوي على تعليق يشرح الغرض
2. **اسماء المتغيرات**: استخدم أسماء واضحة ووصفية
3. **معالجة الأخطاء**: كل عملية async يجب أن تحتوي على try/catch
4. **اختبار التغييرات**: اختبر على صفحات مختلفة من الموقع

#### بنية إضافة ميزة جديدة:
```javascript
// 1. إضافة الميزة في content.js
class NewFeature {
    constructor(parentClass) {
        this.parent = parentClass;
        this.initialize();
    }
    
    initialize() {
        // تهيئة الميزة
    }
    
    execute() {
        // تنفيذ الميزة
    }
}

// 2. إضافة واجهة المستخدم في popup.html
<div class="new-feature-section">
    <h3>الميزة الجديدة</h3>
    <button id="newFeatureBtn">تفعيل</button>
</div>

// 3. إضافة المنطق في popup.js
this.newFeatureBtn.addEventListener('click', () => {
    this.executeNewFeature();
});

// 4. إضافة التخزين في background.js
async function saveNewFeatureSettings(settings) {
    await chrome.storage.local.set({ newFeature: settings });
}
```

#### نمط التواصل بين الملفات:
```javascript
// من popup.js إلى content.js
chrome.tabs.sendMessage(tabId, {
    action: 'NEW_FEATURE_ACTION',
    data: { /* البيانات المطلوبة */ }
});

// من content.js إلى popup.js
chrome.runtime.sendMessage({
    action: 'NEW_FEATURE_RESULT',
    success: true,
    data: { /* نتائج التنفيذ */ }
});

// من background.js إلى popup.js
chrome.runtime.sendMessage({
    action: 'BACKGROUND_NOTIFICATION',
    message: 'إشعار من الخلفية'
});
```

### 🧪 إرشادات الاختبار:

#### اختبار الوحدة:
```javascript
// اختبار دالة استخراج عنوان الوظيفة
function testJobTitleExtraction() {
    const testCases = [
        {
            html: '<span class="heading4">مطور برمجيات</span>',
            expected: 'مطور برمجيات'
        },
        {
            html: '<a href="/JobDetails"><span>محاسب مالي</span></a>',
            expected: 'محاسب مالي'
        }
    ];
    
    testCases.forEach(testCase => {
        const container = document.createElement('div');
        container.innerHTML = testCase.html;
        
        const result = extractJobTitle(container);
        
        console.assert(result === testCase.expected, 
            `Test failed: expected "${testCase.expected}", got "${result}"`);
    });
}
```

#### اختبار التكامل:
```javascript
// اختبار دورة عمل كاملة
async function testFullWorkflow() {
    console.log('بدء اختبار الدورة الكاملة...');
    
    // 1. تحميل صفحة البحث
    window.location.href = 'https://jadarat.sa/ExploreJobs';
    await delay(3000);
    
    // 2. اكتشاف الوظائف
    const jobCards = getJobCards();
    console.log(`تم اكتشاف ${jobCards.length} وظيفة`);
    
    // 3. محاولة معالجة وظيفة واحدة
    if (jobCards.length > 0) {
        await processJob(jobCards[0], 1);
        console.log('تم اختبار معالجة الوظيفة بنجاح');
    }
    
    console.log('انتهى اختبار الدورة الكاملة');
}
```

---

## 🤝 المساهمة والتطوير

### 📝 كيفية المساهمة:

#### 1. **الإبلاغ عن الأخطاء:**
- استخدم قسم Issues في GitHub
- أرفق رسائل الخطأ من Console
- اذكر نوع المتصفح والإصدار
- وضح الخطوات للوصول للخطأ

#### 2. **اقتراح ميزات جديدة:**
- اشرح الفائدة من الميزة
- قدم مخطط أولي للتنفيذ
- ناقش التأثير على الأداء

#### 3. **تطوير الكود:**
- Fork المشروع
- أنشئ فرع جديد للميزة
- اتبع معايير الكود الموجودة
- اختبر التغييرات جيداً
- أرسل Pull Request

### 🏷️ معايير الكود:

#### تسمية الملفات والمتغيرات:
```javascript
// أسماء الملفات: kebab-case
feature-name.js
popup-advanced.css

// أسماء الفئات: PascalCase
class JobProcessor {}
class AutomationManager {}

// أسماء الدوال والمتغيرات: camelCase
function extractJobTitle() {}
const currentJobIndex = 0;

// الثوابت: UPPER_SNAKE_CASE
const MAX_RETRY_ATTEMPTS = 3;
const DEFAULT_DELAY_TIME = 3000;
```

#### تنسيق التعليقات:
```javascript
/**
 * استخراج عنوان الوظيفة من عنصر HTML
 * @param {HTMLElement} container - العنصر الحاوي للوظيفة
 * @param {boolean} fallback - استخدام الطرق البديلة في حالة الفشل
 * @returns {string} عنوان الوظيفة أو "وظيفة غير محددة"
 */
function extractJobTitle(container, fallback = true) {
    // منطق الاستخراج...
}

// تعليق سطر واحد للتوضيح السريع
const jobCards = getJobCards(); // الحصول على قائمة الوظائف
```

---

## 📞 الدعم والاستفسارات

### 🔗 روابط مفيدة:
- **موقع جدارات**: [jadarat.sa](https://jadarat.sa)
- **دليل Chrome Extensions**: [developer.chrome.com](https://developer.chrome.com/docs/extensions/)
- **مستندات Manifest V3**: [Chrome MV3 Guide](https://developer.chrome.com/docs/extensions/mv3/)

### 📧 التواصل:
- **GitHub Issues**: للأخطاء والاقتراحات
- **Email**: للاستفسارات المباشرة
- **Discord**: للنقاش المباشر مع المطورين

### 🏆 المساهمون:
- **المطور الأساسي**: [اسم المطور]
- **المساهمون**: [قائمة المساهمين]
- **المختبرون**: [قائمة المختبرين]

---

## 📋 ملاحظات للذكاء الاصطناعي المستقبلي

### 🧠 لمن سيكمل هذا المشروع:

#### أهم النقاط للفهم:
1. **الموقع ديناميكي**: جدارات يستخدم JavaScript مكثف، انتظر تحميل المحتوى
2. **المحددات متغيرة**: قد تتغير بنية HTML، استخدم محددات متعددة
3. **السرعة مهمة**: المستخدم لا يريد انتظار، لكن تجنب الكشف
4. **الأخطاء شائعة**: شبكة بطيئة، صفحات معطلة، نوافذ غير متوقعة

#### الملفات الحساسة:
- **content.js**: قلب الإضافة، يحتاج صيانة مستمرة
- **popup.js**: واجهة المستخدم، مهمة للتجربة
- **manifest.json**: أذونات وإعدادات، احذر من التغيير

#### أسلوب العمل المعي:
- **طلب HTML**: أطلب أجزاء من HTML للفهم
- **اختبار تدريجي**: ابدأ بميزة واحدة قبل التوسع
- **تفصيل المشاكل**: اشرح المشكلة بالتفصيل مع الكود
- **اقتراح بدائل**: دائماً اقترح حلول متعددة

#### الاختبارات المطلوبة:
```javascript
// اختبار أساسي سريع
console.log('=== اختبار سريع ===');
console.log('الوظائف:', document.querySelectorAll('a[href*="JobDetails"]').length);
console.log('القائمة:', document.querySelector('[data-list]') ? 'موجودة' : 'غير موجودة');
console.log('الصفحة التالية:', document.querySelector('button[aria-label*="next page"]') ? 'موجودة' : 'غير موجودة');
```

---

## 📄 رخصة الاستخدام

```
MIT License

Copyright (c) 2025 جدارات أوتو

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

---

## 🎯 خلاصة المشروع

**جدارات أوتو** هو مشروع طموح يهدف لتسهيل عملية البحث عن الوظائف وتوفير وقت الباحثين عن العمل. الإضافة تستخدم تقنيات متقدمة لمحاكاة السلوك البشري وتقديم تجربة موثوقة وآمنة.

### الإنجازات الحالية:
✅ **واجهة مستخدم متقدمة** بتصميم Cyberpunk جذاب  
✅ **محرك اكتشاف ذكي** للوظائف مع معالجة للحالات المختلفة  
✅ **نظام أتمتة شامل** للتقديم مع معالجة النوافذ المنبثقة  
✅ **نظام إحصائيات مفصل** ومتابعة التقدم  
✅ **معالجة أخطاء متقدمة** واستكشاف مشاكل شامل  

### التحديات المتبقية:
🔄 **اختبار شامل** على بيئات مختلفة  
🔄 **تحسين الأداء** للصفحات الكبيرة  
🔄 **إضافة ميزات ذكية** للفلترة والتحليل  

**هذا المشروع جاهز للاستخدام ومفتوح للتطوير المستمر!** 🚀

---

<div align="center">

**⭐ إذا أعجبك المشروع، لا تنس إعطاؤه نجمة على GitHub! ⭐**

[🌟 Star this project](https://github.com/your-repo/jadarat-auto) | [🐛 Report Bug](https://github.com/your-repo/jadarat-auto/issues) | [💡 Request Feature](https://github.com/your-repo/jadarat-auto/issues)

**صنع بـ ❤️ للمجتمع العربي**

</div>